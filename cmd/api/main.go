package main

import (
	"context"
	"log"
	"net"
	http "net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"clean-arch-go/internal/domain/service"
	"clean-arch-go/internal/pkg/config"
	"clean-arch-go/internal/pkg/container"
	"clean-arch-go/internal/pkg/i18n"
	"clean-arch-go/internal/pkg/redis"
	"clean-arch-go/internal/pkg/server/grpc"
	"clean-arch-go/internal/pkg/server/http/handler"
	"clean-arch-go/internal/pkg/server/http/httpconfig"
	"clean-arch-go/internal/pkg/server/http/middleware"

	_ "clean-arch-go/docs" // docs is generated by Swag CLI, you have to import it.
)

// I18nMiddleware is middleware for handling internationalization
func I18nMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		acceptLang := c.GetHeader("Accept-Language")
		if acceptLang == "" {
			acceptLang = "en"
		}
		c.Set("language", acceptLang)
		c.Next()
	}
}

func main() {
	// Load configuration
	cfg := config.LoadConfig()

	// Initialize container
	container, err := container.NewContainer(cfg)
	if err != nil {
		log.Fatalf("Failed to initialize container: %v", err)
	}

	// Initialize Gin router
	router := setupRouter(
		container.AuthSvc,
		container.BookSvc,
		container.TranslationSvc,
		container.RedisClient,
		container.Config,
	)

	// Initialize HTTP server
	httpServer := &http.Server{
		Addr:    ":" + cfg.App.Port,
		Handler: router,
	}

	// Initialize gRPC server
	grpcServer := grpc.NewServer()

	// Start HTTP server
	go func() {
		log.Printf("HTTP server starting on port %s", cfg.App.Port)
		if err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("HTTP server failed to start: %v", err)
		}
	}()

	go func() {
		grpcAddr := ":" + cfg.App.GRPCPort
		grpcListener, err := net.Listen("tcp", grpcAddr)
		if err != nil {
			log.Fatalf("Failed to listen on gRPC port %s: %v", grpcAddr, err)
		}

		log.Printf("gRPC server listening on %s", grpcAddr)
		if err := grpcServer.Serve(grpcListener); err != nil {
			log.Fatalf("gRPC server failed: %v", err)
		}
	}()

	// Wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	// Shutdown servers
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := httpServer.Shutdown(ctx); err != nil {
		log.Printf("HTTP server shutdown error: %v", err)
	}

	grpcServer.Stop()

	// Close Redis client
	if err := container.RedisClient.Close(); err != nil {
		log.Printf("Redis client shutdown error: %v", err)
	}

	log.Println("Server exiting")
}

// @title           Clean Architecture Go API
// @version         1.0
// @description     This is a sample server for Clean Architecture in Go.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io
// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html
// @host      localhost:8080
// @BasePath  /api
// @securityDefinitions.apikey  ApiKeyAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func setupRouter(
	authSvc service.AuthService,
	bookSvc service.BookService,
	translationSvc service.TranslationService,
	redisClient *redis.RedisClient,
	cfg *config.Config,
) *gin.Engine {
	// Initialize i18n
	i18n.GetLocalizer() // Initialize the singleton

	// Initialize Gin
	if cfg.App.Env == "production" {
		gin.SetMode(gin.ReleaseMode)
	}

	router := gin.Default()

	// Add global middleware
	router.Use(
		middleware.NewLogger(),
		middleware.NewRecovery(),
		middleware.NewCORS(),
		I18nMiddleware(),
	)

	// Rate limiter middleware
	rateLimiter := middleware.NewRateLimiter(redisClient, int(cfg.RateLimit.Limit), int(cfg.RateLimit.Burst))

	// Initialize the main handler
	h := handler.NewHandler(
		authSvc,
		bookSvc,
		translationSvc,
		redisClient,
		httpconfig.NewHTTPConfig(cfg),
	)

	// Swagger documentation
	swaggerURL := ginSwagger.URL("/swagger/doc.json")
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, swaggerURL))

	// Register routes
	h.RegisterAuthRoutes(router)
	h.RegisterBookRoutes(router)
	h.RegisterTranslationRoutes(router)

	// Apply rate limiting to public routes
	public := router.Group("/api")
	public.Use(rateLimiter)
	{
		// Public auth routes
		auth := public.Group("/auth")
		{
			auth.POST("/login", h.Login)
			auth.POST("/register", h.Register)
		}

		// Public translation routes
		translations := public.Group("/translations")
		{
			translations.POST("/translate", h.Translate)
			translations.GET("/supported", h.GetSupportedLanguages)
		}
	}

	// Protected routes (require authentication)
	protected := router.Group("/api")
	protected.Use(middleware.NewAuthMiddleware(authSvc).AuthRequired())
	{
		// Protected book routes
		books := protected.Group("/books")
		{
			books.GET("/", h.ListBooks)
			books.POST("/", h.CreateBook)
			books.GET("/:id", h.GetBook)
		}
	}

	// Health check endpoint
	router.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"status":  "ok",
			"env":     cfg.App.Env,
			"version": "1.0.0",
		})
	})

	return router
}
